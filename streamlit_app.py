# -*- coding: utf-8 -*-
"""app.py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rYQPstDCDWnEAK6IG8Cna0-k4z279P80
"""

import os
import whisper
import yt_dlp
import streamlit as st

# Function to download audio from YouTube using yt_dlp
def download_audio(url: str, output_path: str = "temp_audio.mp3") -> bool:
    try:
        st.info("üì• Downloading audio...")
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': output_path,
            'quiet': True,
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        st.success("‚úÖ Audio downloaded successfully.")
        return True
    except Exception as e:
        st.error(f"‚ùå Download error: {e}")
        return False

# Transcribe audio using Whisper
def transcribe_audio(audio_path: str) -> str:
    try:
        st.info("üîÑ Loading Whisper model...")
        model = whisper.load_model("base")  # Use "tiny" for faster, "large" for better
        st.success("‚úÖ Whisper model loaded.")

        st.info("üìù Transcribing audio...")
        result = model.transcribe(audio_path, language="en")
        st.success("‚úÖ Transcription complete.")
        return result["text"]
    except Exception as e:
        st.error(f"‚ùå Whisper error: {e}")
        raise e

# Simple keyword-based accent classification
def classify_accent(text: str) -> dict:
    text = text.lower()
    if any(word in text for word in ["mate", "aussie", "bloody", "no worries"]):
        return {"accent": "Australian", "confidence": 90.0, "note": "Common Australian slang detected."}
    elif any(word in text for word in ["innit", "cheers", "trousers", "bloody"]):
        return {"accent": "British", "confidence": 88.0, "note": "Vocabulary suggests British English."}
    elif any(word in text for word in ["dude", "awesome", "gotta", "wanna"]):
        return {"accent": "American", "confidence": 85.0, "note": "Typical American expressions found."}
    elif any(word in text for word in ["only yaar", "i am telling", "what is your good name"]):
        return {"accent": "Indian English", "confidence": 80.0, "note": "Phrases linked to Indian English usage."}
    else:
        return {"accent": "General English", "confidence": 70.0, "note": "No strong regional indicators found."}

# Streamlit App
def main():
    st.set_page_config(page_title="Accent Analyzer", layout="centered")
    st.title("üó£Ô∏è English Accent Analyzer")
    st.markdown("Enter a public YouTube video URL to analyze the speaker's English accent.")

    url = st.text_input("üé• YouTube Video URL")

    if st.button("Analyze"):
        if not url:
            st.warning("Please enter a valid YouTube URL.")
            return

        audio_path = "temp_audio.mp3"

        if not download_audio(url, audio_path):
            return

        try:
            text = transcribe_audio(audio_path)
            result = classify_accent(text)

            st.markdown("### üìä Accent Analysis Report")
            st.write(f"**Accent Classification:** {result['accent']}")
            st.write(f"**English Accent Confidence:** {result['confidence']}%")
            st.write(f"**Note:** {result['note']}")
        finally:
            if os.path.exists(audio_path):
                os.remove(audio_path)

if __name__ == "__main__":
    main()

