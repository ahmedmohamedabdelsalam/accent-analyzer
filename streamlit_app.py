# -*- coding: utf-8 -*-
"""app.py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rYQPstDCDWnEAK6IG8Cna0-k4z279P80
"""

# !pip install streamlit yt-dlp openai-whisper

import os
import whisper
import yt_dlp
import streamlit as st

def download_audio(url: str, output_path: str = "temp_audio.mp3") -> bool:
    try:
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': output_path,
            'quiet': True,
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        return True
    except Exception as e:
        st.error(f"Download error: {e}")
        return False

def transcribe_audio(audio_path: str):
    model = whisper.load_model("base")  # or "medium"/"large" if you need higher accuracy
    result = model.transcribe(audio_path, language="en")
    return result["text"]

def classify_accent(text: str) -> dict:
    text = text.lower()
    if any(word in text for word in ["mate", "aussie", "bloody", "no worries"]):
        return {"accent": "Australian", "confidence": 90.0, "note": "Common Australian slang detected."}
    elif any(word in text for word in ["innit", "cheers", "bloody", "trousers"]):
        return {"accent": "British", "confidence": 88.0, "note": "British English vocabulary used."}
    elif any(word in text for word in ["dude", "awesome", "gotta", "wanna"]):
        return {"accent": "American", "confidence": 85.0, "note": "Common American expressions found."}
    elif any(word in text for word in ["only yaar", "i am telling", "what is your good name"]):
        return {"accent": "Indian English", "confidence": 80.0, "note": "Indian English phrases detected."}
    else:
        return {"accent": "General English", "confidence": 70.0, "note": "No strong regional markers found."}

# Streamlit UI
st.title("üéôÔ∏è YouTube Accent Analyzer")
url = st.text_input("Enter a YouTube video URL:")

if st.button("Analyze") and url:
    st.info("Downloading audio...")
    if download_audio(url):
        st.success("Audio downloaded successfully.")
        st.info("Transcribing with Whisper...")
        text = transcribe_audio("temp_audio.mp3")
        st.success("Transcription completed.")
        st.info("Classifying accent...")
        result = classify_accent(text)

        st.markdown("### üìä Accent Analysis Result")
        st.write(f"**Detected Accent:** {result['accent']}")
        st.write(f"**Confidence Score:** {result['confidence']}%")
        st.write(f"**Note:** {result['note']}")

        os.remove("temp_audio.mp3")
    else:
        st.error("Failed to download or process the video.")

